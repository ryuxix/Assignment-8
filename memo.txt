The reason why a hash table is the right structure for a fast lookup is because they're good for fast lookups for information and it would be good for using it for the contact information in the assignment. By using the hash function it can convert a contact’s name into an array index which can access, insert, and update the data in a quick time.
How I handle the collisions is by a separate chaining which means that it uses a linked list structure to handle the collision. For each index of the array points to a chain of Node objects. When there is a collision a new node is added to the end of the list so that you can see the other input. 
Also if there is an existing key that is found then its associated value is updated instead of adding a duplicate node. A time where an engineer might choose a hash table over a list or tree is when you need to do a quick insertion, deletion, and lookup by a unique key. 
While with a list they are better for ordered sequences and trees are useful when maintaining sorted data. But with hash tables they’re the best when direct key based access is most important to the data.
